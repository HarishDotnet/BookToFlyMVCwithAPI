@{
    ViewData["Title"] = "Admin Dashboard";
    ViewData["RenderHeader"] = false;
}
@if (Context.Session.GetString("JWT_TOKEN") != null)
{
    <div>
        @await Html.PartialAsync("~/Views/Admin/Header.cshtml")

        <div class="container mt-5">
            <div class="d-grid gap-2 d-md-flex justify-content-md">
                <a asp-controller="Admin" asp-action="Dashboard" class="btn btn-primary">Back</a>
            </div>
            <hr />
            <div class="card shadow-sm">
                <div class="card-header text-center">
                    <h5 class="card-title mb-0">Update Flight</h5>
                </div>
                <div class="card-body">
                    @if (TempData["SuccessMessage"] != null)
                    {
                        <div class="alert alert-success">@TempData["SuccessMessage"]</div>
                    }

                    @if (TempData["ErrorMessage"] != null)
                    {
                        <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
                    }

                    <div class="mb-3">
                        <label for="FlightType" class="form-label"><span class="text-danger">*</span></label>
                        <select id="FlightType" name="FlightType" class="form-select" required>
                            <option value="" disabled selected>Select Type</option>
                            <option value="International">International</option>
                            <option value="Domestic">Domestic</option>
                        </select>
                        <div class="invalid-feedback">Please select a flight type.</div>
                    </div>

                    <div class="mb-3">
                        <label for="flightNumber" class="form-label"><span
                                class="text-danger">*</span></label>
                        <input type="text" id="flightNumber" name="flightNumber" class="form-control"
                            placeholder="Enter flight number" required autocomplete="off"
                            onclick="showFlightSuggestions()" />
                        <div class="invalid-feedback">Please enter a flight number.</div>

                        <!-- Dropdown for flight number suggestions -->
                        <ul id="flightSuggestionsList" class="list-group position-absolute w-100"
                            style="display: none; max-height: 200px; overflow-y: auto; z-index: 1000; background-color: white; border: 1px solid #ccc;">
                        </ul>
                    </div>

                    <!-- Button to trigger popup -->
                    <!-- Edit Flight Button -->
                    <a href="" id="showCardBtn" class="btn btn-primary btn-sm w-100"
                        onclick="updateFlightIdAndNavigate(event)">
                        <i class="bi bi-pencil-fill"></i>Edit Flight
                    </a>
                </div>
            </div>
        </div>
    </div>
}
else
{
    @await Html.PartialAsync("~Views/Home/Login")
}
<script>
    function updateFlightIdAndNavigate(event) {
        var flightId = document.getElementById('flightNumber').value;  // Get value from input field
        if (!flightId) {
            alert('Please enter a flight number.');
            return;  // Prevent navigation if flightId is empty
        }

        var link = document.getElementById('showCardBtn');
        @* link.href = '@Url.Action("EditGetDetail", "Flight")/'+flightId;  // Set the correct URL with flightId *@
        link.href = '@(Url.Action("EditGetDetail", "Flight"))/' + flightId;

        // Proceed with the navigation
        window.location.href = link.href;
    }
    // Function to show flight suggestions based on flight type
    async function showFlightSuggestions() {
        const flightType = document.getElementById('FlightType').value;
        const flightNumberInput = document.getElementById('flightNumber');
        const suggestionsList = document.getElementById('flightSuggestionsList');

        if (!flightType) {
            alert('Please select a flight type first.');
            return;
        }

        try {
            const response = await fetch(
                `http://localhost:5087/api/Flight/DisplayAllFlightNumbersByType?FlightType=${encodeURIComponent(flightType)}`
            );
            if (response.ok) {
                const flightNumbers = await response.json();
                if (flightNumbers?.length > 0) {
                    suggestionsList.innerHTML = ''; // Clear previous suggestions
                    flightNumbers.forEach((flight) => {
                        const listItem = document.createElement('li');
                        listItem.classList.add('list-group-item', 'list-group-item-action');
                        listItem.textContent = flight;
                        listItem.onclick = function () {
                            flightNumberInput.value = flight;
                            suggestionsList.style.display = 'none'; // Hide suggestions after selection
                        };
                        suggestionsList.appendChild(listItem);
                    });
                    suggestionsList.style.display = 'block'; // Show suggestions
                } else {
                    suggestionsList.style.display = 'none'; // Hide suggestions if no data
                }
            } else {
                alert('Failed to fetch flight numbers.');
            }
        } catch (error) {
            alert('Error loading flight numbers: ' + error);
        }
    }

    // Close the suggestions list when clicking outside
    document.addEventListener('click', function (event) {
        const suggestionsList = document.getElementById('flightSuggestionsList');
        const flightNumberInput = document.getElementById('flightNumber');
        if (!suggestionsList.contains(event.target) && event.target !== flightNumberInput) {
            suggestionsList.style.display = 'none';
        }
    });
</script>
<style>
   /* General Container Styling */
.container {
    background: rgba(245, 245, 245, 0.9); /* Light gray background */
    backdrop-filter: blur(12px); /* Slightly stronger blur effect */
    min-height: 10vh;
    padding: 20px;
    max-width: 900px;
    margin: 0 auto;
    border-radius: 10px; /* Smooth rounded corners */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow for depth */
}

/* Typography */
h2 {
    color: #007bff; /* Primary blue for headings */
    text-align: center;
}

/* Buttons */
.btn-primary {
    background-color: #28a745; /* Green */
    border-color: #28a745;
    color: #fff;
    transition: background-color 0.3s ease, transform 0.2s ease;
}

.btn-primary:hover {
    background-color: #218838; /* Darker green on hover */
    transform: scale(1.05); /* Slight zoom effect */
}

.btn-primary:active {
    background-color: #1e7e34; /* Even darker green on click */
    transform: scale(1);
}

.btn-danger {
    background-color: #dc3545; /* Red */
    border-color: #dc3545;
    color: #fff;
    transition: background-color 0.3s ease, transform 0.2s ease;
}

.btn-danger:hover {
    background-color: #c82333; /* Darker red on hover */
    transform: scale(1.05); /* Slight zoom effect */
}

.btn-danger:active {
    background-color: #bd2130; /* Even darker red on click */
    transform: scale(1);
}

/* Alerts */
.alert-success {
    background-color: #d4edda;
    border-color: #c3e6cb;
    color: #155724;
}

.alert-danger {
    background-color: #f8d7da;
    border-color: #f5c6cb;
    color: #721c24;
}

/* Form Elements */
.form-label {
    font-weight: bold;
    color: #495057;
}

.form-control {
    border: 1px solid #ced4da;
    border-radius: 5px;
    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
    transition: border-color 0.2s ease, box-shadow 0.2s ease;
}

.form-control:focus {
    border-color: #80bdff;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
}

/* Dropdown and Suggestions */
#flightSuggestionsList {
    display: none; /* Initially hidden */
    position: absolute;
    background-color: #fff;
    border: 1px solid #ced4da;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    overflow-y: auto;
    max-height: 200px;
    z-index: 1000;
}

.list-group-item {
    cursor: pointer;
    transition: background-color 0.2s ease;
    padding: 10px;
    font-size: 0.9rem;
}

.list-group-item:hover {
    background-color: #f8f9fa;
}

/* Popup */
#profilePopup {
    width: 25rem;
    background: #fff;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    z-index: 1050;
    padding: 20px;
}

#overlay {
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1040;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

/* Success and Error Messages */
#successMessage, #errorMessage {
    text-align: center;
    margin-bottom: 15px;
}

/* Duration Field */
#duration {
    background-color: #e9ecef;
    color: #495057;
    pointer-events: none; /* Read-only appearance */
}

/* Responsive Design */
.container {
    padding: 15px;
}

h2 {
    font-size: 1.5rem;
}

</style>